use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use sqlx::prelude::FromRow;
use std::fmt::Display;
use uuid::Uuid;

#[derive(Serialize, Deserialize, Debug, FromRow, Default)]
pub struct Price {
    pub id: Uuid,
    pub supplier: String,
    pub manufacturer: String,
    pub collection: String,
    pub name: String,
    pub widths: Vec<f64>,
    pub pile_composition: String,
    pub pile_height: f64,
    pub total_height: f64,
    pub pile_weight: i32,
    pub total_weight: i32,
    pub durability_class: i32,
    pub fire_certificate: String,
    pub purchase_roll_price: f64,
    pub purchase_coupon_price: f64,
    pub recommended_roll_price: f64,
    pub recommended_coupon_price: f64,
    pub updated: DateTime<Utc>,
}
impl Price {
    pub fn safe_print(&self) -> String {
        let widths_str = self
            .widths
            .iter()
            .map(|w| w.to_string())
            .collect::<Vec<_>>()
            .join(", ");
        format!("üè∑ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {}\nüì¶ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {}\nüìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {}\nüìè –®–∏—Ä–∏–Ω—ã (–º): {}\nüß∂ –°–æ—Å—Ç–∞–≤ –≤–æ—Ä—Å–∞: {}\nüìè –í—ã—Å–æ—Ç–∞ –≤–æ—Ä—Å–∞: {:.1} –º–º\nüìê –û–±—â–∞—è –≤—ã—Å–æ—Ç–∞: {:.1} –º–º\n‚öñÔ∏è –í–µ—Å –≤–æ—Ä—Å–∞: {} –≥/–º¬≤\nüèãÔ∏è –û–±—â–∏–π –≤–µ—Å: {} –≥/–º¬≤\nüõ°Ô∏è –ö–ª–∞—Å—Å –∏–∑–Ω–æ—Å–æ—Å—Ç–æ–π–∫–æ—Å—Ç–∏: {}\nüî• –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {}\nüè∑Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞ (—Ä—É–ª–æ–Ω): {:.2} ‚ÇΩ/–º¬≤\nüè∑Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞ (–∫—É–ø–æ–Ω): {:.2} ‚ÇΩ/–º¬≤\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {}", self.manufacturer, self.collection, self.name, widths_str, self.pile_composition, self.pile_height, self.total_height, self.pile_weight, self.total_weight, self.durability_class, self.fire_certificate, self.recommended_roll_price, self.recommended_coupon_price, self.updated.format("%d.%m.%Y %H:%M"))
    }
}
impl Display for Price {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let widths_str = self
            .widths
            .iter()
            .map(|w| w.to_string())
            .collect::<Vec<_>>()
            .join(", ");

        writeln!(f, "üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {}", self.supplier)?;
        writeln!(f, "üè∑ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {}", self.manufacturer)?;
        writeln!(f, "üì¶ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {}", self.collection)?;
        writeln!(f, "üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {}", self.name)?;
        writeln!(f, "üìè –®–∏—Ä–∏–Ω—ã (–º): {}", widths_str)?;
        writeln!(f, "üß∂ –°–æ—Å—Ç–∞–≤ –≤–æ—Ä—Å–∞: {}", self.pile_composition)?;
        writeln!(f, "üìè –í—ã—Å–æ—Ç–∞ –≤–æ—Ä—Å–∞: {:.1} –º–º", self.pile_height)?;
        writeln!(f, "üìê –û–±—â–∞—è –≤—ã—Å–æ—Ç–∞: {:.1} –º–º", self.total_height)?;
        writeln!(f, "‚öñÔ∏è –í–µ—Å –≤–æ—Ä—Å–∞: {} –≥/–º¬≤", self.pile_weight)?;
        writeln!(f, "üèãÔ∏è –û–±—â–∏–π –≤–µ—Å: {} –≥/–º¬≤", self.total_weight)?;
        writeln!(f, "üõ°Ô∏è –ö–ª–∞—Å—Å –∏–∑–Ω–æ—Å–æ—Å—Ç–æ–π–∫–æ—Å—Ç–∏: {}", self.durability_class)?;
        writeln!(
            f,
            "üî• –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {}",
            self.fire_certificate
        )?;
        writeln!(
            f,
            "üí∞ –ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞ (—Ä—É–ª–æ–Ω): {:.2}",
            self.purchase_roll_price
        )?;
        writeln!(
            f,
            "üíµ –ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞ (–∫—É–ø–æ–Ω): {:.2}",
            self.purchase_coupon_price
        )?;
        writeln!(
            f,
            "üè∑Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞ (—Ä—É–ª–æ–Ω): {:.2}",
            self.recommended_roll_price
        )?;
        writeln!(
            f,
            "üè∑Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞ (–∫—É–ø–æ–Ω): {:.2}",
            self.recommended_coupon_price
        )?;
        write!(f, "üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {}", self.updated.format("%d.%m.%Y %H:%M"))
    }
}
#[derive(Serialize, Deserialize, Debug, FromRow, Default)]
pub struct PriceItem {
    pub supplier: String,
    pub manufacturer: String,
    pub collection: String,
    pub name: String,
    pub widths: Vec<f64>,
    pub pile_composition: String,
    pub pile_height: f64,
    pub total_height: f64,
    pub pile_weight: i32,
    pub total_weight: i32,
    pub durability_class: i32,
    pub fire_certificate: String,
    pub purchase_roll_price: f64,
    pub purchase_coupon_price: f64,
    pub recommended_roll_price: f64,
    pub recommended_coupon_price: f64,
}
#[derive(Serialize, Deserialize, Debug, FromRow, Default)]
pub struct PriceDTO {
    pub manufacturer: String,
    pub collection: String,
    pub name: String,
    pub widths: Vec<f64>,
    pub pile_composition: String,
    pub pile_height: f64,
    pub total_height: f64,
    pub pile_weight: i32,
    pub total_weight: i32,
    pub durability_class: i32,
    pub fire_certificate: String,
    pub recommended_roll_price: f64,
    pub recommended_coupon_price: f64,
    pub updated: DateTime<Utc>,
}
impl From<&Price> for PriceDTO {
    fn from(price: &Price) -> Self {
        Self {
            manufacturer: price.manufacturer.clone(),
            collection: price.collection.clone(),
            name: price.name.clone(),
            widths: price.widths.clone(),
            pile_composition: price.pile_composition.clone(),
            pile_height: price.pile_height,
            total_height: price.total_height,
            pile_weight: price.pile_weight,
            total_weight: price.total_weight,
            durability_class: price.durability_class,
            fire_certificate: price.fire_certificate.clone(),
            recommended_roll_price: price.recommended_roll_price,
            recommended_coupon_price: price.recommended_coupon_price,
            updated: price.updated,
        }
    }
}
